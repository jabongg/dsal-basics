package com.example.kafka;

import java.io.IOException;
import java.time.Duration;
import java.util.Collections;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerGroupMetadata;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Service;

@Service
public class Consumer {

	private final Logger logger = LoggerFactory.getLogger(Producer.class);

	@KafkaListener(topics = "users", groupId = "group_id")
	public void consume(String message) throws IOException {
		logger.info(String.format("#### -> Consumed message -> %s", message));

//		
	
		KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);

		consumer.subscribe(Collections.singletonList("users"));
//		ConsumerGroupMetadata consumerGrpMetaData = consumer.groupMetadata();
//		System.out.println(consumerGrpMetaData.groupId() + " " + consumerGrpMetaData.memberId() + " "
//				+ consumerGrpMetaData.generationId());
//
//		try {
//			while (true) {
//				
//				ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000));
//				for (ConsumerRecord<String, String> record : records) {
//					System.out.println(record.topic());
//					System.out.println(record.partition());
//					System.out.println(record.offset());
//					System.out.println(record.key());
//					System.out.println(record.value());
//
//					logger.info(String.format("#### -> Consumed message -> %s", message));
//				}
//			}
//		} finally {
//			consumer.close();
//		}
//

	}

	@KafkaListener(topics = "users", groupId = "group_id")
	public void consume(@Payload DevicePacket packet) throws IOException {
		logger.info(String.format("#### -> Consumed message -> %s",
				packet.getDeviceId() + " " + packet.getLatitude() + " " + packet.getLongitude()));
	}
}