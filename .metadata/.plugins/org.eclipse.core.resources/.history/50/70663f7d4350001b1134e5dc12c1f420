package com.learning.dsal.dp;

/**
 * find maximum number of ways to gain a given sum
 * from array of coins
 * @author User
 *
 */
public class CoinChangeMaxWays {

	
//A memoized solution for subset sum

	static boolean table[][] = new boolean[10][30];

	// Returns true if there is a subset
	// of set[] with sum equal to given sum
	static boolean getMaxNumberOfWaysForCoinChange(int set[],
							int n, int sum) {
		// Base Cases
		if (sum == 0)
			return true;
		if (n == 0)
			return false;

		// If last element is greater than
		// sum, then ignore it
		if (set[n - 1] > sum)
			return table[n][sum] =isSubsetSum(set, n - 1, sum);

		/* else, check if sum can be obtained 
		by any of the following
			(a) including the last element
			(b) excluding the last element */
			boolean isIncluded = isSubsetSum(set, n - 1, sum - set[n - 1]);
			boolean notIncluded = isSubsetSum(set, n - 1, sum); 
			
			if (isIncluded || notIncluded) {
				System.out.println("table " + (n - 1) + " " + sum + " is true");
			}
			return table[n][sum] = isIncluded || notIncluded;

	}

	/* Driver code */
	public static void main(String args[]) {
		int set[] = { 1, 2, 5};
		int sum = 5;
		int n = set.length;
		if (getMaxNumberOfWaysForCoinChange(set, n, sum) == true)
			System.out.println("Found a subset"
							+ " with given sum");
		else
			System.out.println("No subset with"
							+ " given sum");
	}
	
}
