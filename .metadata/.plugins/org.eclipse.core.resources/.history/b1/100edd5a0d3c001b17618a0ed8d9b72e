package com.learning.dsal.tree;

public class TreeNode {

	public static void main(String[] args) {
		
		BSTNode root = null;
		root = insert(root, 28);
		
		//root = insert(root, 28);
        root = insert(root, 45);
        root = insert(root, 20);
        root = insert(root, 25);
        root = insert(root, 30);
        root = insert(root, 13);
        root = insert(root, 93);
        root = insert(root, 50);
        root = insert(root, 27);
        root = insert(root, 13); 
        // trying for duplicity in the tree        
        //root = insert(root, 28);	
        
        System.out.println("Inorder Traversal:");
        inorder(root); // prints tree elements

	}

	private static void inorder(BSTNode root) {

		if (root == null) {
			return;
		} else {
			inorder(root.left);
			System.out.print(root.data + " ");
			inorder(root.right);
		}
	}

	private static BSTNode insert(BSTNode root, int data) {
		if (root == null) {
			return new BSTNode(data);
		} else {
			if (data < root.data) {
				root.left = insert(root.left, data);
			}
			if (data > root.data) {
				root.right = insert(root.right, data);
			}
		}
		return root;
	}
	
	private static int height(BSTNode root) {
		int lh = 0;
		int rh = 0;
		// base condition
		if (root == null) {
			return 0;
		} else {
			lh = height(root.left);
			rh = height(root.right);
		}
		
		return 0;
	}
}
