package com.learning.dsal.tree;

public class TreeNode {

	public static void main(String[] args) {

		BSTNode root = null;
		root = insert(root, 28);

		// root = insert(root, 28);
		root = insert(root, 45);
		root = insert(root, 40);
		root = insert(root, 35);
		root = insert(root, 30);
		root = insert(root, 13);
		root = insert(root, 93);
		root = insert(root, 50);
		root = insert(root, 27);
		// root = insert(root, 13);
		// trying for duplicity in the tree
		// root = insert(root, 28);

//		System.out.println("Inorder Traversal:");
//		inorder(root); // prints tree elements
//		System.out.println("Tree height:" + height(root));
//
//		//inorder(mirror(root));
//		
//		System.out.println("\nBoundary Elements :");
//		printBoundaryElements(root);
//		
//		System.out.println("\n sum as root :"); 
//		System.out.print(sum(root));
//		
		System.out.println("\nDiameter");
		System.out.println(diameter(root, Integer.MIN_VALUE));
	}

	private static void inorder(BSTNode root) {

		if (root == null) {
			return;
		} else {
			inorder(root.left);
			System.out.print(root.data + " ");
			inorder(root.right);
		}
	}

	private static BSTNode insert(BSTNode root, int data) {
		if (root == null) {
			return new BSTNode(data);
		} else {
			if (data < root.data) {
				root.left = insert(root.left, data);
			}
			if (data > root.data) {
				root.right = insert(root.right, data);
			}
		}
		return root;
	}

	private static int height(BSTNode root) {
		// base condition
		if (root == null) {
			return 0;
		}

		int lh = height(root.left);
		int rh = height(root.right);

		return 1 + Math.max(lh, rh);
	}

	private static BSTNode mirror(BSTNode root) {
		if (root == null) {
			return root;
		} else {
			mirror(root.left);
			mirror(root.right);

			// swap

			BSTNode temp;
			temp = root.left;
			root.left = root.right;
			root.right = temp;

		}
		return root;

	}

	private static void printBoundaryElements(BSTNode root) {
		printLeftNodes(root);
		printLeafNodes(root);
		printRightNodes(root);
	}

	private static void printLeftNodes(BSTNode root) {
		if (root == null) {
			return;
		}
		if (root.left != null) {
			System.out.print(root.data + " ");
			printLeftNodes(root.left);
		} else if (root.right != null) {
			System.out.print(root.data + " ");
			printLeftNodes(root.right);
		}
	}

	private static void printLeafNodes(BSTNode root) {

		if (root == null) {
			return;
		}
		printLeafNodes(root.left);
		
		if (root.left == null && root.right == null) {
			System.out.print(root.data + " ");
		}
		printLeafNodes(root.right);
	}

	private static void printRightNodes(BSTNode root) {

		if (root == null) {
			return;
		}
		
		if (root.right != null) {
			printRightNodes(root.right);
			System.out.print(root.data + " ");
		} else if (root.left != null) {
			printRightNodes(root.left);
			System.out.print(root.data + " ");
		}
	}
	
	/*
	 * sum tree:
	 * 
	 *     2
	 *     /\
	 *    4   7
	 *   /   /  \
	 *  -6  -2  8
	 *  
	 *      |
	 *      | 
	 *      v
	 *	   
	 *
	 *         11(-6 +7+6)
	 *          /\
   (-6 + 0)  -6   6(-2 + 8)
	 *       /   /  \
	 *      0   0    0    
	 *    
	 *    
	 *    make children as 0;
	 */
	private static int sum(BSTNode root) {
		if (root == null) {
			return 0; // setting children value as 0;
		}
		
		int lSum = sum(root.left);
		int rSum = sum(root.right);
		
		//induction step : what we do
		int temp = root.data;
	    root.data = lSum + rSum;
	    
		
		return temp + root.data;	
	}
	
	/*
	 * diameter of a binary tree may or may not be BST
	 */
	private static int diameter(BSTNode root, int result) {
		if (root == null) {
			return 0;
		}
		
		int lDiameter = diameter(root.left, result);
		int rDiameter = diameter(root.right, result);
		
		int temp = Math.max(lDiameter, rDiameter) + 1;
		int answer = Math.max(temp, 1 + lDiameter + rDiameter);
		
		result = Math.max(result, answer);
		return temp;
		
	}
	
	// Recursive optimized Java program to find the diameter of
	// a Binary Tree

	// Class containing left and right child of current
	// node and key value
	class Node {
		int data;
		Node left, right;

		public Node(int item)
		{
			data = item;
			left = right = null;
		}
	}


		int diameter(Node root)
		{
			// base case if tree is empty
			if (root == null)
				return 0;

			// get the height of left and right sub-trees
			int lheight = height(root.left);
			int rheight = height(root.right);

			// get the diameter of left and right sub-trees
			int ldiameter = diameter(root.left);
			int rdiameter = diameter(root.right);

			/* Return max of following three
			1) Diameter of left subtree
			2) Diameter of right subtree
			3) Height of left subtree + height of right subtree + 1
			*/
			return Math.max(lheight + rheight + 1,
							Math.max(ldiameter, rdiameter));
		}

		// A wrapper over diameter(Node root)
		int diameterTree(BSTNode root) { return diameter(root); }

		// The function Compute the "height" of a tree. Height
		// is the number of nodes along the longest path from the
		// root node down to the farthest leaf node.
		static int height(Node node)
		{
			// base case tree is empty
			if (node == null)
				return 0;

			// If tree is not empty then height = 1 + max of
			// left height and right heights
			return (1
					+ Math.max(height(node.left),
							height(node.right)));
		}
}
