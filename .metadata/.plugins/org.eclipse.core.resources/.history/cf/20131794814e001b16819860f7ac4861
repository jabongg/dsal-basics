package com.learning.dsal.tree;

public class TreeNode {

	public static void main(String[] args) {

		BSTNode root = null;
		root = insert(root, 28);

		// root = insert(root, 28);
		root = insert(root, 45);
		root = insert(root, 40);
		root = insert(root, 35);
		root = insert(root, 30);
		root = insert(root, 13);
		root = insert(root, 93);
		root = insert(root, 50);
		root = insert(root, 27);
		// root = insert(root, 13);
		// trying for duplicity in the tree
		// root = insert(root, 28);

		System.out.println("Inorder Traversal:");
		inorder(root); // prints tree elements
		System.out.println("Tree height:" + height(root));

		inorder(mirror(root));
		
		printBoundaryElements(root);
	}

	private static void inorder(BSTNode root) {

		if (root == null) {
			return;
		} else {
			inorder(root.left);
			System.out.print(root.data + " ");
			inorder(root.right);
		}
	}

	private static BSTNode insert(BSTNode root, int data) {
		if (root == null) {
			return new BSTNode(data);
		} else {
			if (data < root.data) {
				root.left = insert(root.left, data);
			}
			if (data > root.data) {
				root.right = insert(root.right, data);
			}
		}
		return root;
	}

	private static int height(BSTNode root) {
		// base condition
		if (root == null) {
			return 0;
		}

		int lh = height(root.left);
		int rh = height(root.right);

		return 1 + Math.max(lh, rh);
	}

	private static BSTNode mirror(BSTNode root) {
		if (root == null) {
			return root;
		} else {
			mirror(root.left);
			mirror(root.right);

			// swap

			BSTNode temp;
			temp = root.left;
			root.left = root.right;
			root.right = temp;

		}
		return root;

	}

	private static void printBoundaryElements(BSTNode root) {
		printLeftNodes(root);
		printLeafNodes(root);
		printRightNodes(root);
	}

	private static void printLeftNodes(BSTNode root) {
		if (root.left == null) {
			return;
		}
		if (root.left != null) {
			printLeftNodes(root.left);
			System.out.println(root.data);
		} else if (root.right != null) {
			printLeftNodes(root.right);
			System.out.println(root.data);
		}
		printLeftNodes(root.left);
		return;
	}

	private static void printLeafNodes(BSTNode root) {

		if (root == null) {
			return;
		}
		printLeafNodes(root.left);
		
		if (root.left == null && root.right == null) {
			System.out.println(root.data);
		}
		printLeafNodes(root.right);
		return;
	}

	private static void printRightNodes(BSTNode root) {

		if (root == null) {
			return;
		}
		
		if (root.right != null) {
			printRightNodes(root.right);
			System.out.println(root.data);
		} else if (root.left != null) {
			printRightNodes(root.left);
			System.out.println(root.data);
		}
		return;
	}
}
