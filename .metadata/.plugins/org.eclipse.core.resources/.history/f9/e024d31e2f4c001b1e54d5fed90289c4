package com.learning.dsal.dp;

public class KnapsackTopDown {	
	
	public static void main(String[] args) {

		// given weights of n items.
		int[] weight = {10, 20, 30}; // weight of items
		int[] value = {60, 100, 120}; // price of the items
		int W = 50; // capacity of the knapsack
	
		// functions starts here.
		int maxValue = knapsackTopDown(weight, value, W, weight.length);
		System.out.println(maxValue);
	}

	private static int knapsackTopDown(int[] weight, int[] value, int W, int n) {

		int[][] table = new int[n + 1][W + 1];

		int i, j;
		
		for (int i = 0; i <= n; i++) {
			for (int j = 0; j < W; j++) {
				table[i][j] = -1;
			}
		}
		
		// base condition
		if (W == 0 || n == 0) {
			return 0;
		}
		
		if (table[n][W] != -1) {
			return table[n][W];
		}
		if (weight[n - 1] <= W) {
		return	table[n][W] = Math.max(
				
				// in case last item i.e. weight[n - 1] is <bold>included</bold> in the knapsack
				value[n - 1] + knapsack(weight, value, W - weight[n - 1], n - 1),
				
				// in case last item i.e. weight[n - 1] is <bold>not included</bold> in the knapsack
				knapsack(weight, value, W, n - 1));				
		}
		
		// in case item does not fit into capacity
		else if (weight[n - 1] > W) {
			return table[n][W] = knapsack(weight, value, W, n - 1);				
		}
		return 0;
	}
}
